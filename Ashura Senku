if game:GetService("RunService"):IsClient() then error("Script must be server-side in order to work; use h/ and not hl/") end
local Player,Mouse,mouse,UserInputService,ContextActionService = owner
do
	print("FE Compatibility code by Mokiros | Translated to FE by iPxter")
	script.Parent = Player.Character

	--RemoteEvent for communicating
	local Event = Instance.new("RemoteEvent")
	Event.Name = "UserInput_Event"

	--Fake event to make stuff like Mouse.KeyDown work
	local function fakeEvent()
		local t = {_fakeEvent=true,Connect=function(self,f)self.Function=f end}
		t.connect = t.Connect
		return t
	end

	--Creating fake input objects with fake variables
	local m = {Target=nil,Hit=CFrame.new(),KeyUp=fakeEvent(),KeyDown=fakeEvent(),Button1Up=fakeEvent(),Button1Down=fakeEvent()}
	local UIS = {InputBegan=fakeEvent(),InputEnded=fakeEvent()}
	local CAS = {Actions={},BindAction=function(self,name,fun,touch,...)
		CAS.Actions[name] = fun and {Name=name,Function=fun,Keys={...}} or nil
	end}
	--Merged 2 functions into one by checking amount of arguments
	CAS.UnbindAction = CAS.BindAction

	--This function will trigger the events that have been :Connect()'ed
	local function te(self,ev,...)
		local t = m[ev]
		if t and t._fakeEvent and t.Function then
			t.Function(...)
		end
	end
	m.TrigEvent = te
	UIS.TrigEvent = te

	Event.OnServerEvent:Connect(function(plr,io)
		if plr~=Player then return end
		if io.isMouse then
			m.Target = io.Target
			m.Hit = io.Hit
		else
			local b = io.UserInputState == Enum.UserInputState.Begin
			if io.UserInputType == Enum.UserInputType.MouseButton1 then
				return m:TrigEvent(b and "Button1Down" or "Button1Up")
			end
			for _,t in pairs(CAS.Actions) do
				for _,k in pairs(t.Keys) do
					if k==io.KeyCode then
						t.Function(t.Name,io.UserInputState,io)
					end
				end
			end
			m:TrigEvent(b and "KeyDown" or "KeyUp",io.KeyCode.Name:lower())
			UIS:TrigEvent(b and "InputBegan" or "InputEnded",io,false)
		end
	end)
	Event.Parent = NLS([==[
	local Player = game:GetService("Players").LocalPlayer
	local Event = script:WaitForChild("UserInput_Event")

	local UIS = game:GetService("UserInputService")
	local input = function(io,a)
		if a then return end
		--Since InputObject is a client-side instance, we create and pass table instead
		Event:FireServer({KeyCode=io.KeyCode,UserInputType=io.UserInputType,UserInputState=io.UserInputState})
	end
	UIS.InputBegan:Connect(input)
	UIS.InputEnded:Connect(input)

	local Mouse = Player:GetMouse()
	local h,t
	--Give the server mouse data 30 times every second, but only if the values changed
	--If player is not moving their mouse, client won't fire events
	while wait(1/30) do
		if h~=Mouse.Hit or t~=Mouse.Target then
			h,t=Mouse.Hit,Mouse.Target
			Event:FireServer({isMouse=true,Target=t,Hit=h})
		end
	end]==], Player.Character)
	Mouse,mouse,UserInputService,ContextActionService = m,m,UIS,CAS
end

Player = owner
PlayerGui = Player.PlayerGui
Cam = workspace.CurrentCamera
Backpack = Player.Backpack
Character = Player.Character
Humanoid = Character.Humanoid
root = Humanoid.RootPart

-- // Ashura Senku, by Meatloaf
print("Ashura Senku, by Meatloaf")
-- // There are no animation cuz i suck at CFrame animating
print("There are no animation cuz i suck at CFrame animating")

local isCooldown = false
local functions = {}

-- // Functions
coroutine.wrap(function()
	function functions.Particle(effect, pos)
		local part = Instance.new("Part", workspace.Debris)
		part.Size = Vector3.new(1,1,1)
		part.Anchored = true
		part.CanCollide = false
		part.Transparency = 1
		if typeof(pos) == "Vector3" then
			part.Position = pos
		elseif typeof(pos) == "CFrame" then
			part.CFrame = pos
		end
		if typeof(effect) == "table" then
			for i, v in pairs(effect) do
				v.Parent = part
			end
		else
			effect.Parent = part
		end
		return part
	end

	function functions.Tween(instance, number, property, style, direction)
		local selectedstyle = style or Enum.EasingStyle.Sine
		local selecteddirect = direction or Enum.EasingDirection.InOut
		local tween = game.TweenService:Create(instance, TweenInfo.new(number, selectedstyle, selecteddirect), property)
		tween:Play()
		return tween
	end

	function functions.Invisible(char:Model, bool:boolean)
		for i, v in pairs(char:GetDescendants()) do
			if v:IsA("BasePart") and v.Name ~= "HumanoidRootPart" then
				if bool == true then
					functions.Tween(v, 0.5, {Transparency = 1})
					functions.Tween(char.Head:FindFirstChildOfClass("Decal"), 0.5, {Transparency = 1})
				else
					functions.Tween(v, 0.5, {Transparency = 0})
					functions.Tween(char.Head:FindFirstChildOfClass("Decal"), 0.5, {Transparency = 0})
				end
			end
		end
	end

	function functions.Motoric(parent, part1)
		assert(parent, "Cannot find the parent for the Motor")
		assert(part1, "Cannot find the animatable part")
		assert(part1.Anchored == false, "The animatable part must be unanchored")
		local motoric = Instance.new("Motor6D", parent)
		motoric.Name = part1.Name .. "_Motoric"
		motoric.Part0 = parent
		motoric.Part1 = part1

		return motoric
	end

	function functions.Welder(parent, part1)
		assert(parent, "Cannot find the parent for the Weld")
		assert(part1, "Cannot find the Welding part")
		assert(part1.Anchored == false, "The Welding part must be unanchored")
		local motoric = Instance.new("Weld", parent)
		motoric.Name = part1.Name .. "_Weld"
		motoric.Part0 = parent
		motoric.Part1 = part1

		return motoric
	end

	function functions.NearestTorso(pos, mainignore, ignore, range)
		local list = game.Workspace:GetDescendants()
		local torso = nil
		local dist = range or 1000
		local temp = nil
		local human = nil
		local temp2 = nil
		for x = 1, #list do
			temp2 = list[x]
			if (temp2.className == "Model") and (temp2 ~= mainignore) and (temp2 ~= ignore) then
				temp = temp2:FindFirstChild("Torso")
				human = temp2:FindFirstChildOfClass("Humanoid")
				if (temp ~= nil) and (human ~= nil) and (human.Health > 0) and (temp2:FindFirstChild("HumanoidRootPart").Anchored == false) then
					if (temp.Position - pos).magnitude < dist then
						torso = temp
						dist = (temp.Position - pos).magnitude
					end
				end
			end
		end
		return torso
	end

	function functions:Hitbox(size, position, name, touch)
		local hitbox = Instance.new("Part", workspace.Debris)
		hitbox.Name = name or "NewHitbox"
		hitbox.Transparency = 1
		hitbox.Anchored = true
		hitbox.CanCollide = false
		hitbox.Size = size or Vector3.new(45,45,45)
		if typeof(position) == "Vector3" then
			hitbox.Position = position
		elseif typeof(position) == "CFrame" then
			hitbox.CFrame = position
		end
		hitbox.Touched:Connect(touch)

		return hitbox
	end

	function functions.NewSound(soundId, parent, property)
		local sfx = Instance.new("Sound")
		sfx.SoundId = soundId
		sfx.Volume = 1

		coroutine.wrap(function()
			sfx.Ended:Wait()
			sfx:Destroy()
		end)()
		coroutine.wrap(function()
			if typeof(property) == "table" then
				for i, v in pairs(property) do
					sfx[i] = v
				end
			else
				return warn("Property must be a table")
			end
		end)()

		sfx.Parent = parent or workspace.Debris
		sfx:Play()
		return sfx
	end

	function functions:Heal(humanoid, min, max)
		local rand = math.random(min, max)
		if humanoid.Health <= humanoid.MaxHealth - 20 then
			humanoid.Health += rand
		else
			humanoid.Health = humanoid.MaxHealth
		end
	end

	function functions:WaitForProperty(instance, property)
		repeat wait() until instance[property]
		print(tostring(instance[property]) .. " existed!")
		return instance[property]
	end
end)()

-- // Debug
Player.Chatted:connect(function(msg)
	if msg:sub(1, 3) == "/e " then
		msg = msg:sub(4)
	end
	if msg == "/fixcd" then
		if isCooldown == true then
			isCooldown = false
			print("Cooldown fixed")
		end
	end
end)

-- // On Press Event
Mouse.KeyDown:connect(function(k)
	local key = k:lower()
	if key == "e" then
		-- //<< Debounce
		if isCooldown == true then
			return warn("In cooldown")
		end
		isCooldown = true
		-- >>//

		-- // Dash Code
		local useEnd = false
		local Sound = nil
		local oldHealth, oldMaxHealth

		-- // Play Sound
		-- // "Serializer Output" Plugin
		coroutine.wrap(function()
			Sound = Instance.new("Sound")
			Sound.PlaybackSpeed = 1.3
			Sound.SoundId = "rbxassetid://7267837723"
			Sound.Pitch = 1.3
			Sound.Ended:Connect(function()
				Sound:Destroy()
				useEnd = true -- Stop working effects
			end)

			local EqualizerSoundEffect = Instance.new("EqualizerSoundEffect")
			EqualizerSoundEffect.LowGain = -80
			EqualizerSoundEffect.HighGain = 10
			EqualizerSoundEffect.MidGain = 10
			EqualizerSoundEffect.Parent = Sound

			local PitchShiftSoundEffect = Instance.new("PitchShiftSoundEffect")
			PitchShiftSoundEffect.Octave = 0.53
			PitchShiftSoundEffect.Parent = Sound

			Sound.Parent = root
		end)()
		repeat wait() until Sound.IsLoaded == true

		-- // Velocity for character moving
		local dash = Instance.new("BodyForce")
		dash.Force = Vector3.new(0, 6, 0)
		coroutine.wrap(function()
			while task.wait() do
				if useEnd == true then
					break
				end
				root.Velocity = root.CFrame.LookVector * 60
			end
		end)()
		dash.Parent = root
		Sound:Play()

		task.wait(0.1)
		-- //<< Dash Effect
		coroutine.wrap(function()
			while task.wait(0.06) do
				-- // Check if dashing is completed
				if useEnd == true then
					break -- Stop the loop
				end

				-- // Model for FakeParts
				local model = Instance.new("Model")
				model.Name = "Dash_Effect"
				model.Parent = Character

				-- // FakeParts
				for i, v in ipairs(Character:GetDescendants()) do
					if v:IsA("BasePart") and v ~= root then
						-- // Variable
						local fakePart = v:Clone()
						local colorSwitch = nil

						-- // Remove unwanted children inside the part
						for i, sp in pairs(fakePart:GetDescendants()) do
							if sp:IsA("SpecialMesh") then
								sp.TextureId = "" -- // No Texture
							elseif sp:IsA("Decal") then
								sp.Transparency = 1
							elseif sp:IsA("ParticleEmitter") then
								sp:Destroy()
								-- //<< Destroy JointInstances
							elseif sp:IsA("Motor6D") then
								sp:Destroy()
							elseif sp:IsA("Weld") then
								sp:Destroy()
								-- >>//
							elseif sp:IsA("Attachment") then
								sp:Destroy()
							end
						end

						-- // FakePart modification
						fakePart.Color = Color3.new(1, 1, 1)
						fakePart.Anchored = true
						fakePart.CanCollide = false
						fakePart.CFrame = v.CFrame
						fakePart.Material = "Neon"

						-- // FakePart deletion
						task.delay(0.2, function()
							colorSwitch = functions.Tween(fakePart, 0.4, {
								Color = Color3.new(0, 0, 0)
							})
							colorSwitch.Completed:Wait()
							task.delay(0.25, function()
								local shrink = functions.Tween(fakePart, 1.2, {
									Position = fakePart.Position + Vector3.new(0, 5, 0), 
									Size = Vector3.new(0, 0 ,0),
									Transparency = 1
								})
								shrink.Completed:Wait()
								model:Destroy()
							end)
						end)

						-- // Parenting
						fakePart.Parent = model

					end
				end

			end
		end)()

		coroutine.wrap(function()
			-- // Particle Emitter effect
			-- // "Serializer Output" Plugin
			for i, v in pairs(Character:GetChildren()) do
				if v:IsA("BasePart") and v ~= root then
					-- // Make Particles
					local DashEffect = Instance.new("ParticleEmitter")
					DashEffect.Name = "DashEffect"
					DashEffect.Lifetime = NumberRange.new(0.3, 0.3)
					DashEffect.Transparency = NumberSequence.new(0, 1)
					DashEffect.LightEmission = 0.3
					DashEffect.Color = ColorSequence.new(v.Color, Color3.fromRGB(255, 0, 0))
					DashEffect.Speed = NumberRange.new(13, 13)
					DashEffect.Brightness = 3.23
					DashEffect.Size = NumberSequence.new({NumberSequenceKeypoint.new(0, 0.5), NumberSequenceKeypoint.new(0.6, 0.5), NumberSequenceKeypoint.new(1, 0)})
					DashEffect.Enabled = true
					DashEffect.Acceleration = Vector3.new(0, 30, 0)
					DashEffect.RotSpeed = NumberRange.new(-9000, 9000)
					DashEffect.ZOffset = 0.3
					DashEffect.Rate = 100
					DashEffect.EmissionDirection = Enum.NormalId.Back
					DashEffect.Texture = "rbxassetid://3618653659"
					DashEffect.Rotation = NumberRange.new(-360, 360)

					DashEffect.Parent = v
					coroutine.wrap(function()
						repeat task.wait() until useEnd == true
						DashEffect.Enabled = false
						game.Debris:AddItem(DashEffect, 0.6)
					end)()
				end
			end
		end)()
		-- >>//

		-- // Invincible
		oldHealth = Humanoid.Health
		oldMaxHealth = Humanoid.MaxHealth
		Humanoid.MaxHealth = math.huge
		Humanoid.Health = Humanoid.MaxHealth

		-- // End
		Sound.Ended:Wait()
		dash:Destroy()
		Humanoid.MaxHealth = oldMaxHealth
		Humanoid.Health = oldHealth

		task.delay(2.5, function()
			isCooldown = false
		end)	
	end
end)
